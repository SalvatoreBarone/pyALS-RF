// Copyright 2021-2022 Salvatore Barone <salvatore.barone@unina.it>
// 
// This file has been auto-generated by pyALS-rf
// https://github.com/SalvatoreBarone/pyALS-rf 
// 
// This is free software; you can redistribute it and/or modify it under
// the terms of the GNU General Public License as published by the Free
// Software Foundation; either version 3 of the License, or any later version.
// 
// This is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
// more details.
// 
// You should have received a copy of the GNU General Public License along with
// RMEncoder; if not, write to the Free Software Foundation, Inc., 51 Franklin
// Street, Fifth Floor, Boston, MA 02110-1301, USA. 

#include <iostream>
#include <bitset>
#include <limits>
#include "classifier_{{id}}.h"

typedef std::numeric_limits< double > double_limits;

void print_binary_64(std::ostream& stream, void * const data)
{
  unsigned long * udata = (unsigned long *)data;
  stream << std::bitset<64>(*udata);
}

int main()
{
  std::cout.precision(double_limits::max_digits10);
  {% for feature in features -%}
  {{feature['type']}} data_{{feature['name']}};
  {% endfor %}
  {% for predicted_class in classes -%}
  int class_{{predicted_class}};
  {% endfor %}

  {% for feature in features -%}
  data_{{feature['name']}} = 0;
  {% endfor %}
  
  {% for feature in features -%}
  std::cout <<"{{feature['name']}}: " <<data_{{feature['name']}} << " ";
  print_binary_64(std::cout,&data_{{feature['name']}});
  std::cout << std::endl;
  {% endfor %}
  
  {% for predicted_class in classes -%}
  class_{{predicted_class}} = 0;
  {% endfor %}   

  classifier_{{id}} classifier;
  classifier.classify({% for feature in features -%}{{"data_"}}{{feature['name']}},{% endfor %}{% for predicted_class in classes -%}{{"&class_"}}{{predicted_class}}{{", " if not loop.last else ");"}}{% endfor %}
  {% for predicted_class in classes -%}
  std::cout << std::bitset<1>(class_{{predicted_class}}); 
  std::cout <<{{"\" \"" if not loop.last else "std::endl"}};
  {% endfor %}
}
