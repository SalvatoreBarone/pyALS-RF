-- Copyright 2021-2023 Salvatore Barone <salvatore.barone@unina.it>
-- 
-- This file has been auto-generated by pyALS-rf
-- https://github.com/SalvatoreBarone/pyALS-rf 
--
-- This is free software; you can redistribute it and/or modify it under
-- the terms of the GNU General Public License as published by the Free
-- Software Foundation; either version 3 of the License, or any later version.
--
-- This is distributed in the hope that it will be useful, but WITHOUT
-- ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
-- FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
-- more details.
--
-- You should have received a copy of the GNU General Public License along with
-- RMEncoder; if not, write to the Free Software Foundation, Inc., 51 Franklin
-- Street, Fifth Floor, Boston, MA 02110-1301, USA.
library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
library work;
use work.debug_func.all;
entity tb_classifier is
end entity tb_classifier;
architecture testbench of tb_classifier is
  component classifier is
    generic (
      data_width      : natural := 64;
      parallel_blocks : natural := 8;
      pipe_stages     : natural := 4;
      {% for f in features -%}nab_{{f['name']}} : natural := {{f['nab']}}{{";" if not loop.last else ");"}}
      {% endfor %}
    port (
      clock   : in std_logic;
      reset_n : in std_logic;
      enable  : in std_logic;
      {% for feature in features -%}{{feature['name']}} : in std_logic_vector(data_width-1 downto nab_{{feature['name']}});
      {% endfor %}
      {% for c in classes -%}{{c}} : out std_logic{{";" if not loop.last else ");"}}
      {% endfor %}
  end component;
  constant test_vectors    : natural    := 10000;
  constant clock_period    : time       := 10 ns;
  signal   simulate        : std_logic  := '1';
  constant data_width      : natural := 64;
  constant parallel_blocks : natural := 8;
  constant pipe_stages     : natural := 4;
  {% for f in features -%}constant nab_{{f['name']}} : natural := {{f['nab']}};
  {% endfor %}
  signal clock           : std_logic   := '0';
  signal reset_n         : std_logic   := '0';
  signal enable          : std_logic   := '0';
  {% for f in features -%}signal {{f['name']}} : std_logic_vector(data_width-1 downto nab_{{f['name']}});
  {% endfor %}{% for c in classes -%}signal {{c}} : std_logic;
  {% endfor %}
begin
  uut : classifier
    generic map(data_width, parallel_blocks, pipe_stages, {% for feature in features -%}nab_{{feature['name']}}{{", " if not loop.last else ")"}}{% endfor %}
    port map(clock, reset_n, enable, {% for f in features -%}{{f['name']}}, {% endfor %}{% for c in classes -%}{{c}}{{", " if not loop.last else ");"}}{% endfor %}
  clock_process : process
  begin
    while simulate = '1' loop
      clock <= not clock;
      wait for clock_period / 2;
    end loop;
    wait;
  end process clock_process;
  stim_process : process
  begin
    reset_n <= '0';
    enable <= '0';
    wait for 50 ns;
    reset_n <= '1';
    for i in 0 to test_vectors loop
      {% for f in features -%}{{f['name']}} <= std_logic_vector(to_signed(random(-2**(data_width-1), 2**(data_width-1)-1), data_width - nab_{{f['name']}}));
      {% endfor %}
      enable <= '1';
      wait for 2*clock_period;
      enable <= '0';
      wait for (3+pipe_stages)*clock_period;
    end loop;
    simulate <= '0';
    wait;
  end process;
end testbench;
