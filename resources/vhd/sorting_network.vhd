-- Copyright 2021-2023 Salvatore Barone <salvatore.barone@unina.it>
-- 
-- This file has been auto-generated by pyALS-rf
-- https://github.com/SalvatoreBarone/pyALS-rf 
-- 
-- This is free software; you can redistribute it and/or modify it under
-- the terms of the GNU General Public License as published by the Free
-- Software Foundation; either version 3 of the License, or any later version.
-- 
-- This is distributed in the hope that it will be useful, but WITHOUT
-- ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
-- FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
-- more details.
-- 
-- You should have received a copy of the GNU General Public License along with
-- RMEncoder; if not, write to the Free Software Foundation, Inc., 51 Franklin
-- Street, Fifth Floor, Boston, MA 02110-1301, USA.

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
entity sorting_network is
    generic	(
        n_trees  : natural;
        n_classes : natural;
        pipe_stages : natural);
    port (
        clock    : in  std_logic;
        reset_n  : in  std_logic;
        data_in  : in  std_logic_vector (n_trees-1 downto 0);
        majority : out std_logic_vector(n_trees*(n_classes-2)/(2*n_classes)-1 downto 0));  -- N/2 - N/C = (N*C - 2*N)/2C = N*(C-2)/2C-1
end sorting_network;
architecture sorting_network of sorting_network is
    component swapper_block is
    generic (n_trees : natural);
    port (
      data_in  : in std_logic_vector(n_trees-1 downto 0);
      data_out : out std_logic_vector(n_trees-1 downto 0));
  end component;
  component pipe_reg is
    generic(n_trees : natural);
    port ( 
      clock    : in  std_logic;
      reset_n  : in  std_logic;
      enable   : in  std_logic;
      data_in  : in  std_logic_vector (n_trees-1 downto 0);
      data_out : out std_logic_vector (n_trees-1 downto 0));
  end component;
    constant swapper_per_pipe : natural := n_trees / pipe_stages;
    type matrix is array (natural range <>) of std_logic_vector (n_trees-1 downto 0);
    signal intermediates : matrix (0 to n_trees + pipe_stages);
begin
    assert pipe_stages mod 2 = 0 report "pipe_stages must be a multiple of two" severity failure;
    assert swapper_per_pipe >= 2 report "too many pipe stages" severity failure;

    data_in_buffer : pipe_reg
        generic map (n_trees => n_trees)
        port map (
            clock => clock,
            reset_n => reset_n,
            enable => '1', 
            data_in => data_in,
            data_out => intermediates(0));

    majority <=	intermediates(n_trees + pipe_stages)(n_trees / 2 downto n_trees / n_classes);

    chain : for i in 0 to n_trees + pipe_stages - 1 generate
        pipe : if (i+1) mod (swapper_per_pipe+1) = 0 generate 
              pipe_buffer: pipe_reg	
                generic map (n_trees => n_trees) 
                port map (clock => clock, reset_n => reset_n, enable => '1', data_in => intermediates(i), data_out => intermediates(i+1));
        end generate;
        swapper : if (i+1) mod (swapper_per_pipe+1) /= 0 generate 
            swapper_inst: swapper_block
                generic map (n_trees => n_trees)
                port map(data_in => intermediates(i), data_out => intermediates(i+1));
        end generate;
    end generate;
end architecture;
