project(PVMHDMLL NONE)
cmake_minimum_required(VERSION 3.3)
include(cmake/vhdl_macros.cmake)
execute_process(COMMAND ghdl -v OUTPUT_VARIABLE GHDL_VERSION_STRING)
if($GHDL_VERSION_STRING STREQUAL "")
    message(FATAL_ERROR "GHDL not found")
else()
    message(STATUS "Found ${GHDL_VERSION_STRING}")
endif()
execute_process(COMMAND gtkwave --version OUTPUT_VARIABLE GTKWAVE_VERSION_STRING)
if($GTKWAVE_VERSION_STRING STREQUAL "")
    message(FATAL_ERROR "GTKWAVE not found")
else()
    message(STATUS "Found ${GTKWAVE_VERSION_STRING}")
    set(VCD_VIEWER gtkwave)
endif()
enable_testing()
set(CTEST_OUTPUT_ON_FAILURE 1)
add_custom_target(runtest COMMAND ${CMAKE_CTEST_COMMAND} --verbose --build-run-dir=${CMAKE_CURRENT_BINARY_DIR})

add_vhdl_source(bnf.vhd bnf)
add_vhdl_source(pipe_reg.vhd pipe_reg)
add_vhdl_source(decision_box.vhd decision_box)
add_dependencies(decision_box pipe_reg)
add_vhdl_source(voter.vhd voter)
add_dependencies(voter pipe_reg)
add_vhdl_source(tb/debug_func.vhd debug_func)
add_testbench_source(tb/tb_basic_comparator.vhd tb_basic_comparator)
add_dependencies(tb_basic_comparator decision_box debug_func)
add_testbench_source(tb/tb_parallel_comparator.vhd tb_parallel_comparator)
add_dependencies(tb_parallel_comparator decision_box debug_func)
add_testbench_source(tb/tb_decision_box_int.vhd tb_decision_box_int)
add_dependencies(tb_decision_box_int decision_box debug_func)
add_testbench_source(tb/tb_decision_box_fp.vhd tb_decision_box_fp)
add_dependencies(tb_decision_box_fp decision_box debug_func)
add_testbench_source(tb/tb_voter.vhd tb_voter)
add_dependencies(tb_voter voter debug_func)

{% for tree in trees -%}
add_vhdl_source(assertions_block_{{tree}}.vhd assertions_block_{{tree}})
add_vhdl_source(decision_tree_{{tree}}.vhd decision_tree_{{tree}})
add_dependencies(assertions_block_{{tree}} decision_box bnf)
add_dependencies(decision_tree_{{tree}} assertions_block_{{tree}} decision_box)

{% endfor %}
add_vhdl_source(classifier.vhd classifier)
add_dependencies(classifier voter {% for tree in trees -%}decision_tree_{{tree}} {% endfor %})
#add_testbench_source(tb_classifier classifier)
#add_testbench_source(tb/tb_classifier.vhd tb_classifier)
# add_dependencies(tb_classifier classifier debug_func)

add_custom_target(list ALL COMMAND ${CMAKE_VHDL_COMPILER} -d DEPENDS ${VHDL_MODULE} ${VHDL_TEST_MODULE})
