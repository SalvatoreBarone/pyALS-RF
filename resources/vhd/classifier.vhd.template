-- Copyright 2020-2021 Salvatore Barone <salvatore.barone@unina.it>
-- 
-- This file has been auto-generated by EDGINESS 
-- https://github.com/SalvatoreBarone/EDGINESS 
-- 
-- This is free software; you can redistribute it and/or modify it under
-- the terms of the GNU General Public License as published by the Free
-- Software Foundation; either version 3 of the License, or any later version.
-- 
-- This is distributed in the hope that it will be useful, but WITHOUT
-- ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
-- FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
-- more details.
-- 
-- You should have received a copy of the GNU General Public License along with
-- RMEncoder; if not, write to the Free Software Foundation, Inc., 51 Franklin
-- Street, Fifth Floor, Boston, MA 02110-1301, USA.

library ieee;
use ieee.std_logic_1164.all;
library work;
use work.common_types.all;
use work.bnf.all;

entity classifier is
  generic (
    data_width      : natural;
    parallel_blocks : natural;
    pipe_stages     : natural;
    {% for feature in features -%}
    neglected_bits_{{feature['name']}} : natural{{";" if not loop.last else ");"}}
    {% endfor %}
  port (
    clock   : in std_logic;
    reset_n : in std_logic;
    enable  : in std_logic;
    {% for feature in features -%}
    data_{{feature['name']}} : in std_logic_vector(data_width-1 downto neglected_bits_{{feature['name']}});
    {% endfor %}
    {% for c in classes -%}
    class_{{c}} : out std_logic{{";" if not loop.last else ");"}}
    {% endfor %}
end classifier;

architecture structural of classifier is
  component voter is
    generic	(
      data_width  : natural;
      pipe_stages : natural);
    port (
      clock    : in  std_logic;
      reset_n  : in  std_logic;
      data_in  : in  std_logic_vector (data_width-1 downto 0);
      majority : out std_logic);
  end component;
  {% for tree in trees -%}
  component decision_tree_{{tree}} is
    generic (
      data_width      : natural;
      parallel_blocks : natural;
      {% for feature in features -%}
      neglected_bits_{{feature['name']}} : natural{{";" if not loop.last else ");"}}
      {% endfor %}
    port (
      clock   : in std_logic;
      reset_n : in std_logic;
      enable  : in std_logic;
      {% for feature in features -%}
      data_{{feature['name']}}: in std_logic_vector(data_width-1 downto neglected_bits_{{feature['name']}});
      {% endfor %}
      {% for c in classes -%}
      class_{{c}} : out std_logic{{";" if not loop.last else ");"}}
      {% endfor %}
  end component;{{"\n  " if not loop.last}}
  {% endfor %}
  {% for c in classes -%}
  signal class_{{c}}_results : std_logic_vector({{trees|length-1}} downto 0) := (others => '0');
  {% endfor %}
begin
  {% for tree in trees -%}{% set outer_loop = loop %}
  tree_{{tree}} : decision_tree_{{tree}} 
    generic map (data_width, parallel_blocks, {% for feature in features -%}neglected_bits_{{feature['name']}}{{", " if not loop.last else ")"}}{% endfor %}
    port map (clock, reset_n, enable, {% for feature in features -%}data_{{feature['name']}}, {% endfor %}{% for c in classes -%}class_{{c}}_results({{outer_loop.index-1}}){{", " if not loop.last else ");"}}{% endfor %}
  {% endfor %}
  {% if trees|length > 1 %}
  {% for c in classes -%}
  comb_class_{{c}} : voter 
    generic map({{trees|length}}, pipe_stages) 
    port map(clock, reset_n, class_{{c}}_results, class_{{c}});
  {% endfor %}
  {% else %}
  {% for c in classes -%}
  class_{{c}} <= class_{{c}}_results(0);
  {% endfor %}{% endif %}
end structural;