-- Copyright 2021-2023 Salvatore Barone <salvatore.barone@unina.it>
-- 
-- This file has been auto-generated by pyALS-rf
-- https://github.com/SalvatoreBarone/pyALS-rf 
-- 
-- This is free software; you can redistribute it and/or modify it under
-- the terms of the GNU General Public License as published by the Free
-- Software Foundation; either version 3 of the License, or any later version.
-- 
-- This is distributed in the hope that it will be useful, but WITHOUT
-- ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
-- FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
-- more details.
-- 
-- You should have received a copy of the GNU General Public License along with
-- RMEncoder; if not, write to the Free Software Foundation, Inc., 51 Franklin
-- Street, Fifth Floor, Boston, MA 02110-1301, USA.

library ieee;
use ieee.std_logic_1164.all;
library work;
use work.common_types.all;
use work.bnf.all;
entity decision_tree_{{tree_name}} is
  generic (
    data_width      : natural;
    parallel_blocks : natural;
    {% for feature in features -%}
    nab_{{feature['name']}} : natural{{";" if not loop.last else ");"}}
    {% endfor %}
  port (
    clock   : in std_logic;
    reset_n : in std_logic;
    enable  : in std_logic;
    {% for feature in features -%}
    {{feature['name']}} : in std_logic_vector(data_width-1 downto nab_{{feature['name']}});
    {% endfor %}
    {% for c in classes -%}
    class_{{c}} : out std_logic{{";" if not loop.last else ");"}}
    {% endfor %}
end decision_tree_{{tree_name}};

architecture structural of decision_tree_{{tree_name}} is
  component decision_box is
    generic (
      data_width      : natural;
      data_type       : data_type_t;
      comp_operator   : comp_operator_t;
      parallel_blocks : natural);
    port ( 
      clock   : in  std_logic;
      reset_n : in  std_logic;
      enable  : in  std_logic;
      data_1  : in  std_logic_vector (data_width-1 downto 0);
      data_2  : in  std_logic_vector (data_width-1 downto 0);
      result  : out std_logic);
  end component;

  component assertions_block_{{tree_name}} is
    port (
      {% for b in boxes -%}{{b['name']}} : in std_logic;
      {% endfor %}
      {% for c in classes -%}class_{{c}} : out std_logic{{";" if not loop.last else ");"}}
      {% endfor %}
  end component;

  {% for b in boxes -%}signal {{b['name']}} : std_logic := '0';
  {% endfor %}
  {% for b in boxes -%}constant {{b['name']}}_thr : std_logic_vector(data_width-1 downto 0) := x"{{b['threshold_hex']}}";
  {% endfor %}

begin
  {% for b in boxes -%}{{b['name']}}_inst : decision_box
    generic map(
      data_width => data_width - nab_{{b['feature']}}, 
      data_type => {{b['data_type']}}, 
      comp_operator => {{b['operator']}}, 
      parallel_blocks => parallel_blocks)
    port map(
      clock => clock, 
      reset_n => reset_n, 
      enable => enable, 
      data_1 => {{b['feature']}}, 
      data_2 => {{b['name']}}_thr(data_width-1 downto nab_{{b['feature']}}), 
      result => {{b['name']}});
  {% endfor %}
  assertions : assertions_block_{{tree_name}}
    port map ({% for b in boxes -%}
      {{b['name']}} => {{b['name']}}, 
      {% endfor %}{% for c in classes -%}
      class_{{c}} => class_{{c}}{{", " if not loop.last}}
      {% endfor %});
end structural;
