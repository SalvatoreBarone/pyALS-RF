-- Copyright 2020-2021 Salvatore Barone <salvatore.barone@unina.it>
-- 
-- This file has been auto-generated by EDGINESS 
-- https://github.com/SalvatoreBarone/EDGINESS 
-- 
-- This is free software; you can redistribute it and/or modify it under
-- the terms of the GNU General Public License as published by the Free
-- Software Foundation; either version 3 of the License, or any later version.
-- 
-- This is distributed in the hope that it will be useful, but WITHOUT
-- ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
-- FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
-- more details.
-- 
-- You should have received a copy of the GNU General Public License along with
-- RMEncoder; if not, write to the Free Software Foundation, Inc., 51 Franklin
-- Street, Fifth Floor, Boston, MA 02110-1301, USA.

library ieee;
use ieee.std_logic_1164.all;
library work;
use work.common_types.all;
use work.bnf.all;
entity ax_classifier_wrapper_{{id}} is
  generic (
    data_width      : natural := 64;
    parallel_blocks : natural := 8;
    pipe_stages     : natural := 4;
    {% for c in axconf -%}
    neglected_bits_{{c['name']}} : natural := {{c['nab']}}{{";" if not loop.last else ");"}}
    {% endfor %}
  port (
    clock   : in std_logic;
    reset_n : in std_logic;
    enable  : in std_logic;
    {% for feature in features -%}
    data_{{feature['name']}} : in std_logic_vector(data_width-1 downto neglected_bits_{{feature['name']}});
    {% endfor %}
    {% for predicted_class in classes -%}
    class_{{predicted_class}} : out std_logic{{";" if not loop.last else ");"}}
    {% endfor %}
end ax_classifier_wrapper_{{id}};
architecture structural of ax_classifier_wrapper_{{id}} is
  component classifier is
    generic (
      data_width      : natural;
      parallel_blocks : natural;
      pipe_stages     : natural;
      {% for feature in features -%}
      neglected_bits_{{feature['name']}} : natural{{";" if not loop.last else ");"}}
      {% endfor %}
    port (
      clock   : in std_logic;
      reset_n : in std_logic;
      enable  : in std_logic;
      {% for feature in features -%}
      data_{{feature['name']}} : in std_logic_vector(data_width-1 downto neglected_bits_{{feature['name']}});
      {% endfor %}
      {% for predicted_class in classes -%}
      class_{{predicted_class}} : out std_logic{{";" if not loop.last else ");"}}
      {% endfor %}
  end component;
begin
  precision_reduced_classifier : classifier
    generic map (data_width, parallel_blocks, pipe_stages, {% for feature in features -%}neglected_bits_{{feature['name']}}{{", " if not loop.last else ")"}}{% endfor %}
    port map (clock, reset_n, enable, {% for feature in features -%}data_{{feature['name']}}, {% endfor %}{% for predicted_class in classes -%}class_{{predicted_class}}{{", " if not loop.last else ");"}}{% endfor %}
end structural;
