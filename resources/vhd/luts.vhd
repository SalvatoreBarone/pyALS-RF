-- Copyright 2021-2023 Salvatore Barone <salvatore.barone@unina.it>
-- 
-- This file has been auto-generated by pyALS-rf
-- https://github.com/SalvatoreBarone/pyALS-rf 
-- 
-- This is free software; you can redistribute it and/or modify it under
-- the terms of the GNU General Public License as published by the Free
-- Software Foundation; either version 3 of the License, or any later version.
-- 
-- This is distributed in the hope that it will be useful, but WITHOUT
-- ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
-- FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
-- more details.
-- 
-- You should have received a copy of the GNU General Public License along with
-- RMEncoder; if not, write to the Free Software Foundation, Inc., 51 Franklin
-- Street, Fifth Floor, Boston, MA 02110-1301, USA.

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
entity LUT6 is
    generic (INIT : std_logic_vector(63 downto 0)); -- Specify LUT Contents
    port (
        O  : out std_logic; -- LUT general output
        I0 : in std_logic;  -- LUT input
        I1 : in std_logic;  -- LUT input
        I2 : in std_logic;  -- LUT input
        I3 : in std_logic;  -- LUT input
        I4 : in std_logic;  -- LUT input
        I5 : in std_logic   -- LUT input
    );
end LUT6;
architecture data_flow of LUT6 is
    signal input_vector : std_logic_vector(5 downto 0) := (others => '0');
begin
    input_vector <= I5 & I4 & I3 & I2 & I1 & I0;
    O <= INIT(to_integer(unsigned(input_vector)));
end data_flow;

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
entity LUT5 is
    generic (INIT : std_logic_vector(31 downto 0)); -- Specify LUT Contents
    port (
        O  : out std_logic; -- LUT general output
        I0 : in std_logic;  -- LUT input
        I1 : in std_logic;  -- LUT input
        I2 : in std_logic;  -- LUT input
        I3 : in std_logic;  -- LUT input
        I4 : in std_logic   -- LUT input
    );
end LUT5;
architecture data_flow of LUT5 is
    signal input_vector : std_logic_vector(4 downto 0) := (others => '0');
begin
    input_vector <= I4 & I3 & I2 & I1 & I0;
    O <= INIT(to_integer(unsigned(input_vector)));
end data_flow;

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
entity LUT4 is
    generic (INIT : std_logic_vector(15 downto 0)); -- Specify LUT Contents
    port (
        O  : out std_logic; -- LUT general output
        I0 : in std_logic;  -- LUT input
        I1 : in std_logic;  -- LUT input
        I2 : in std_logic;  -- LUT input
        I3 : in std_logic   -- LUT input
    );
end LUT4;
architecture data_flow of LUT4 is
    signal input_vector : std_logic_vector(3 downto 0) := (others => '0');
begin
    input_vector <= I3 & I2 & I1 & I0;
    O <= INIT(to_integer(unsigned(input_vector)));
end data_flow;

