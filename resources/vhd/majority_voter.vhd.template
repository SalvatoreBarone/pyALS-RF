-- 
-- This file has been auto-generated by pyALS-rf
-- https://github.com/SalvatoreBarone/pyALS-rf 
-- 
-- This is free software; you can redistribute it and/or modify it under
-- the terms of the GNU General Public License as published by the Free
-- Software Foundation; either version 3 of the License, or any later version.
-- 
-- This is distributed in the hope that it will be useful, but WITHOUT
-- ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
-- FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
-- more details.
-- 
-- You should have received a copy of the GNU General Public License along with
-- RMEncoder; if not, write to the Free Software Foundation, Inc., 51 Franklin
-- Street, Fifth Floor, Boston, MA 02110-1301, USA.

library ieee;
use ieee.std_logic_1164.all;
library work;
use work.common_types.all;
use work.bnf.all;

entity majority_voter is
    generic	(
        n_trees  : natural;
        n_classes : natural;
        pipe_stages : natural);
  port (
    clock   : in std_logic;
    reset_n : in std_logic;
    {% for c in classes -%}
    class_{{c}}_score : in std_logic_vector(n_trees-1 downto 0);;
    {% endfor %}
    {% for c in classes -%}class_{{c}} : out std_logic;
    {% endfor %}
    draw : std_logic);
end classifier;

architecture structural of majority_voter is
    component pipe_reg is
        generic(data_width : natural);
        port ( 
          clock    : in  std_logic;
          reset_n  : in  std_logic;
          enable   : in  std_logic;
          data_in  : in  std_logic_vector (data_width-1 downto 0);
          data_out : out std_logic_vector (data_width-1 downto 0));
      end component;
    component sorting_network is
        generic	(
        n_trees  : natural;
        n_classes : natural;
        pipe_stages : natural);
    port (
        clock    : in  std_logic;
        reset_n  : in  std_logic;
        data_in  : in  std_logic_vector (n_trees-1 downto 0);
        majority : out std_logic_vector(n_trees*(n_classes-2)/(2*n_classes)-1 downto 0));  -- N/2 - N/C = (N*C - 2*N)/2C = N*(C-2)/2C-1
    end component;
    component rejection_module is
        generic	(
            n_trees  : natural;
            n_classes : natural;
            pipe_stages : natural);
        port (
            clock    : in  std_logic;
            reset_n  : in  std_logic;
            {% for c in classes -%}
            class_{{c}}_combined : in std_logic_vector(n_trees*(n_classes-2)/(2*n_classes)-1 downto 0);
            {% endfor %}
            {% for c in classes -%}class_{{c}} : out std_logic;
            {% endfor %}
            draw : out std_logic);
    end component;
    {% for c in classes -%}
    signal class_{{c}}_combined : std_logic_vector(n_trees*(n_classes-2)/(2*n_classes)-1 downto 0) => (others => '0');
    {% endfor %}
begin
  {% for c in classes -%}
  comb_{{c}} : sorting_network 
    generic map(
        data_width => n_trees,
        n_classes => n_classes,
        pipe_stages => pipe_stages) 
    port map(
        clock => clock,
        reset_n => reset_n, 
        data_in => class_{{c}}_score,
        majority => class_{{c}}_combined);
  {% endfor %}
  reject_mod : rejection_module
    generic map(
        data_width => n_trees,
        n_classes => n_classes,
        pipe_stages => pipe_stages) 
    port map(
            clock => clock,
            reset_n => reset_n, 
            {% for c in classes -%}
                class_{{c}}_combined => class_{{c}}_combined,
            {% endfor %}
            {% for c in classes -%}
                class_{{c}} => class_{{c}},
            {% endfor %}
            draw => draw);
end structural;
