-- 
-- This file has been auto-generated by pyALS-rf
-- https://github.com/SalvatoreBarone/pyALS-rf 
-- 
-- This is free software; you can redistribute it and/or modify it under
-- the terms of the GNU General Public License as published by the Free
-- Software Foundation; either version 3 of the License, or any later version.
-- 
-- This is distributed in the hope that it will be useful, but WITHOUT
-- ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
-- FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
-- more details.
-- 
-- You should have received a copy of the GNU General Public License along with
-- RMEncoder; if not, write to the Free Software Foundation, Inc., 51 Franklin
-- Street, Fifth Floor, Boston, MA 02110-1301, USA.

library ieee;
use ieee.std_logic_1164.all;
library work;

entity majority_voter is
    generic	(
        n_voting  : natural;
        n_candidates : natural;
        sorting_pipe_stages : natural;
        reject_pipe_stages : natural);
    port (
        clock   : in std_logic;
        reset_n : in std_logic;
        {% for c in candidates -%}
        candidate_{{c}}_preferences : in std_logic_vector(n_voting - 1 downto 0);
        {% endfor %}
        {% for c in candidates -%}candidate_{{c}} : out std_logic;
        {% endfor %}
        draw : out std_logic);
end majority_voter;

architecture structural of majority_voter is
    component pipe_reg is
        generic(data_width : natural);
        port ( 
          clock    : in  std_logic;
          reset_n  : in  std_logic;
          enable   : in  std_logic;
          data_in  : in  std_logic_vector (data_width-1 downto 0);
          data_out : out std_logic_vector (data_width-1 downto 0));
      end component;
    component sorting_network is
        generic	(
            n_voting  : natural;
            n_candidates : natural;
            pipe_stages : natural);
        port (
            clock    : in  std_logic;
            reset_n  : in  std_logic;
            preferences  : in  std_logic_vector (n_voting-1 downto 0);
            sorted_preferences : out std_logic_vector(n_voting-1 downto 0));
    end component;
    component rejection_module is
        generic	(
            n_voting  : natural;
            n_candidates : natural;
            pipe_stages : natural);
        port (
            clock    : in  std_logic;
            reset_n  : in  std_logic;
            {% for c in candidates -%}
            candidate_{{c}}_sorted_preferences : in std_logic_vector(n_voting  - 1 downto 0);
            {% endfor %}
            {% for c in candidates -%}candidate_{{c}} : out std_logic;
            {% endfor %}
            draw : out std_logic);
    end component;
    {% for c in candidates -%}
    signal candidate_{{c}}_sorted_preferences : std_logic_vector(n_voting - 1 downto 0) := (others => '0');
    {% endfor %}
begin
  {% for c in candidates -%}
  comb_{{c}} : sorting_network 
    generic map(
        n_voting => n_voting,
        n_candidates => n_candidates,
        pipe_stages => sorting_pipe_stages) 
    port map(
        clock => clock,
        reset_n => reset_n, 
        preferences => candidate_{{c}}_preferences,
        sorted_preferences => candidate_{{c}}_sorted_preferences);
  {% endfor %}
  reject_mod : rejection_module
    generic map(
        n_voting => n_voting,
        n_candidates => n_candidates,
        pipe_stages => reject_pipe_stages) 
    port map(
            clock => clock,
            reset_n => reset_n, 
            {% for c in candidates -%}
                candidate_{{c}}_sorted_preferences => candidate_{{c}}_sorted_preferences,
            {% endfor %}
            {% for c in candidates -%}
                candidate_{{c}} => candidate_{{c}},
            {% endfor %}
            draw => draw);
end structural;
