-- 
-- This file has been auto-generated by pyALS-rf
-- https://github.com/SalvatoreBarone/pyALS-rf 
-- 
-- This is free software; you can redistribute it and/or modify it under
-- the terms of the GNU General Public License as published by the Free
-- Software Foundation; either version 3 of the License, or any later version.
-- 
-- This is distributed in the hope that it will be useful, but WITHOUT
-- ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
-- FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
-- more details.
-- 
-- You should have received a copy of the GNU General Public License along with
-- RMEncoder; if not, write to the Free Software Foundation, Inc., 51 Franklin
-- Street, Fifth Floor, Boston, MA 02110-1301, USA.

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity rejection_module is
    generic	(
        n_voting  : natural;
        n_candidates : natural;
        pipe_stages : natural);
    port (
        clock    : in  std_logic;
        reset_n  : in  std_logic;
        {% for c in candidates -%}
        candidate_{{c}}_sorted_preferences : in std_logic_vector(n_voting - 1 downto 0);
        {% endfor %}
        {% for c in candidates -%}candidate_{{c}} : out std_logic;
        {% endfor %}
        draw : out std_logic);
end rejection_module;
architecture dataflow of rejection_module is
    component sorting_network is
        generic	(
            n_voting  : natural;
            n_candidates : natural;
            pipe_stages : natural);
        port (
            clock    : in  std_logic;
            reset_n  : in  std_logic;
            preferences  : in  std_logic_vector (n_voting-1 downto 0);
            sorted_preferences : out std_logic_vector(n_voting-1 downto 0)); 
    end component;
    function minimum_threshold(voting : natural; candidates : natural) 
        return natural is
    begin
        if voting < candidates then
            return 2;
        else
            return voting / candidates + 1;
        end if;
    end function;
    constant t_min : natural := minimum_threshold(n_voting, n_candidates);
    constant t_max : natural := n_voting / 2 + 1;
    constant n_thresholds : natural := t_max - t_min + 1;
    signal at_least_one : std_logic_vector(n_thresholds - 1 downto 0) := (others => '0');
    type std_logic_matrix is array (n_thresholds-1 downto 0) of std_logic_vector(n_candidates-1 downto 0);
    signal sort_nets_out : std_logic_matrix := (others => (others => '0'));
    signal sort_nets_in : std_logic_matrix := (others => (others => '0'));
    signal sort_nets_out_and : std_logic_vector(n_thresholds-1 downto 0) := (others => '0');
begin
    rej_gen : for i in 0 to n_thresholds - 1 generate
        begin
            at_least_one(i) <= {% for c in candidates %}candidate_{{c}}_sorted_preferences(i+t_min-1){{";" if loop.last else " or "}}{% endfor %}
            sort_nets_in(i) <= {% for c in candidates %}candidate_{{c}}_sorted_preferences(i+t_min-1){{";" if loop.last else " & "}}{% endfor %}
            sort_net : sorting_network
                generic	map (
                    n_voting  => n_candidates,
                    n_candidates => n_thresholds,
                    pipe_stages => pipe_stages)
                port map (
                    clock => clock,
                    reset_n  => reset_n,
                    preferences  => sort_nets_in(i),
                    sorted_preferences => sort_nets_out(i));
            sort_nets_out_and(i) <= sort_nets_out(i)(0) and sort_nets_out(i)(1);
        end generate;
    draw <= {% for i, m in thresholds.items() %} sort_nets_out_and({{i}}) when (at_least_one = b"{{m}}") else {% endfor %}'1';
    {% for c in candidates %}candidate_{{c}} <= {% for i, m in thresholds.items() %} candidate_{{c}}_sorted_preferences({{i}}+t_min-1) when (at_least_one = b"{{m}}") else {% endfor %}candidate_{{c}}_sorted_preferences(t_min-2);
    {% endfor %}
end dataflow;
