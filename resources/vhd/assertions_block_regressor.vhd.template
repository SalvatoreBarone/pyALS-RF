-- Copyright 2021-2023 Salvatore Barone <salvatore.barone@unina.it>
-- 
-- This file has been auto-generated by pyALS-rf
-- https://github.com/SalvatoreBarone/pyALS-rf 
-- 
-- This is free software; you can redistribute it and/or modify it under
-- the terms of the GNU General Public License as published by the Free
-- Software Foundation; either version 3 of the License, or any later version.
-- 
-- This is distributed in the hope that it will be useful, but WITHOUT
-- ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
-- FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
-- more details.
-- 
-- You should have received a copy of the GNU General Public License along with
-- RMEncoder; if not, write to the Free Software Foundation, Inc., 51 Franklin
-- Street, Fifth Floor, Boston, MA 02110-1301, USA.

library ieee;
use ieee.std_logic_1164.all;
-- library work;
-- use work.bnf.all;

entity assertions_block_{{tree_name}} is
  port (
    {% for b in boxes -%}{{b}} : in std_logic;
    {% endfor %}
    regression_value : out std_logic;
  );
end assertions_block_{{tree_name}};
architecture dataflow of assertions_block_{{tree_name}} is
  component LUT6 is
    generic (INIT : std_logic_vector(63 downto 0)); -- Specify LUT Contents
    port (
        O  : out std_logic; -- LUT general output
        I0 : in std_logic;  -- LUT input
        I1 : in std_logic;  -- LUT input
        I2 : in std_logic;  -- LUT input
        I3 : in std_logic;  -- LUT input
        I4 : in std_logic;  -- LUT input
        I5 : in std_logic   -- LUT input
    );
  end component;
  component LUT5 is
    generic (INIT : std_logic_vector(31 downto 0)); -- Specify LUT Contents
    port (
        O  : out std_logic; -- LUT general output
        I0 : in std_logic;  -- LUT input
        I1 : in std_logic;  -- LUT input
        I2 : in std_logic;  -- LUT input
        I3 : in std_logic;  -- LUT input
        I4 : in std_logic   -- LUT input
    );
  end component;
  component LUT4 is
    generic (INIT : std_logic_vector(15 downto 0)); -- Specify LUT Contents
    port (
        O  : out std_logic; -- LUT general output
        I0 : in std_logic;  -- LUT input
        I1 : in std_logic;  -- LUT input
        I2 : in std_logic;  -- LUT input
        I3 : in std_logic   -- LUT input
    );
  end component;
  {% for b in boxes -%}signal not_{{b}} : std_logic := '0';
  {% endfor %}
  {% for f in nontrivial_classes -%}
  {% for l in f['luts'] -%}{% if not l['o'].startswith('class') %}signal {{l['o']}} : std_logic := '0';{% endif %}
  {% endfor %}{% endfor %}
begin
  {% for b in boxes -%}not_{{b}} <= not {{b}};
  {% endfor %}
  {% for f in trivial_classes -%}class_{{f['class']}} <= {{f['expression']}};
  {% endfor %}
  {% for f in nontrivial_classes -%}
    {% for l in f['luts'] -%}
    {{l['inst']}} : {{l['type']}}
      generic map(INIT => {{l['conf']}})
      port map(
        O => {{l['o']}},
        {% for i in l['pi'] -%}
        I{{loop.index0}} => {{i}}{{"," if not loop.last}}
        {% endfor %});
    {% endfor %}
  {% endfor %}
end dataflow;
