## Copyright 2021-2023 Salvatore Barone <salvatore.barone@unina.it>
## 
## This file has been auto-generated by pyALS-rf
## https://github.com/SalvatoreBarone/pyALS-rf 
##
## This is free software; you can redistribute it and/or modify it under
## the terms of the GNU General Public License as published by the Free
## Software Foundation; either version 3 of the License, or any later version.
##
## This is distributed in the hope that it will be useful, but WITHOUT
## ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
## FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
## more details.
##
## You should have received a copy of the GNU General Public License along with
## RMEncoder; if not, write to the Free Software Foundation, Inc., 51 Franklin
## Street, Fifth Floor, Boston, MA 02110-1301, USA.

cmake_minimum_required(VERSION 3.10)
project(classifier NONE)
set(VCD_VIEWER gtkwave)
include(vhdl_macros.cmake)
execute_process(COMMAND ghdl -v OUTPUT_VARIABLE GHDL_VERSION_STRING)
if($GHDL_VERSION_STRING STREQUAL "")
    message(FATAL_ERROR "GHDL not found")
else()
    message(STATUS "Found ${GHDL_VERSION_STRING}")
endif()
execute_process(COMMAND gtkwave --version OUTPUT_VARIABLE GTKWAVE_VERSION_STRING)
if($GTKWAVE_VERSION_STRING STREQUAL "")
    message(FATAL_ERROR "GTKWAVE not found")
else()
    message(STATUS "Found ${GTKWAVE_VERSION_STRING}")
endif()
enable_testing()
add_custom_target(
	runtest 
	COMMAND ${CMAKE_CTEST_COMMAND} --verbose --build-run-dir=${CMAKE_CURRENT_BINARY_DIR}
)

#add_vhdl_source(src/bnf.vhd bnf)
add_vhdl_source(src/luts.vhd LUT6)
add_vhdl_source(src/pipe_reg.vhd pipe_reg)

add_vhdl_source(src/decision_box.vhd decision_box)
add_dependencies(decision_box pipe_reg)

{% for tree_name in tree_names %}
add_vhdl_source(src/assertions_block_{{tree_name}}.vhd assertions_block_{{tree_name}})
#add_dependencies(assertions_block_{{tree_name}} bnf)
add_dependencies(assertions_block_{{tree_name}} LUT6)

add_vhdl_source(src/decision_tree_{{tree_name}}.vhd decision_tree_{{tree_name}})
add_dependencies(decision_tree_{{tree_name}} assertions_block_{{tree_name}})
{% endfor %}

add_vhdl_source(src/swapper_block.vhd swapper_block)

add_vhdl_source(src/simple_voter.vhd simple_voter)
add_dependencies(simple_voter swapper_block pipe_reg)

add_vhdl_source(src/sorting_network.vhd sorting_network)
add_dependencies(sorting_network swapper_block pipe_reg)

add_vhdl_source(src/rejection_module.vhd rejection_module)
add_dependencies(rejection_module sorting_network simple_voter)

add_vhdl_source(src/majority_voter.vhd majority_voter)
add_dependencies(majority_voter sorting_network rejection_module)

add_vhdl_source(src/classifier.vhd classifier)
add_dependencies(classifier pipe_reg decision_box majority_voter {% for tree_name in tree_names %}decision_tree_{{tree_name}} {% endfor %})

add_vhdl_source(tb/debug_func.vhd debug_func)
add_testbench_source(tb/tb_classifier.vhd tb_classifier)
add_dependencies(tb_classifier classifier debug_func)

add_custom_target(list ALL COMMAND ${CMAKE_VHDL_COMPILER} -d DEPENDS ${VHDL_MODULE} ${VHDL_TEST_MODULE})
set(CTEST_OUTPUT_ON_FAILURE 1)


