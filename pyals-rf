#!/usr/bin/python3 
"""
Copyright 2021-2023 Salvatore Barone <salvatore.barone@unina.it>

This is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free
Software Foundation; either version 3 of the License, or any later version.

This is distributed in the hope that it will be useful, but WITHOUT
ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
more details.

You should have received a copy of the GNU General Public License along with
RMEncoder; if not, write to the Free Software Foundation, Inc., 51 Franklin
Street, Fifth Floor, Boston, MA 02110-1301, USA.
"""
import click, os, sys, logging
from multiprocessing import cpu_count
from src.ctx_factory import set_global_options, store_flow
from src.Flows.ps_flow import ps_flow, ps_eval, ps_distance, ps_compare, compute_gini_dist
from src.Flows.grep_flow import grep_flow, redundancy_plot
from src.Flows.als_flow import als_one_step, als_two_steps
from src.Flows.combined_flow import full_one_step, full_two_steps
from src.Flows.debug_flow import hdl_debug_flow, debug_with_scikit, print_model
from src.ConfigParsers.DtGenConfigParser import *
from src.hdl_generation import hdl_generation
from src.git_updater import git_updater

@click.group(chain=True)
@click.pass_context
def cli(ctx):
    ctx.ensure_object(dict)
    
@cli.command("ps")
@click.option('-c', '--conf', type=click.Path(exists=True, dir_okay=False), default = None, help = "JSON configuration file")
@click.option('-j', '--ncpus', type = int, help = f"Number of parallel jobs to be used turing DSE. By default, it is {cpu_count()}", default = cpu_count())
@click.option('-e', '--espresso', is_flag = True, help = "Enable the Espresso heuristic logic minimizer for implementing Boolean Networks")
@click.option('--mode', type=click.Choice(["rank", "full"]), default = "full")
@click.option('--alpha', type=float, default = 0.07)
@click.option('--beta', type=float, default = 0.5)
@click.option('--gamma', type=float, default = 2)
@click.option('-v', '--verbose', type = click.Choice(["DEBUG", "INFO", "WARNINGS", "ERROR", "CRITICAL", 10, 20, 30, 40, 50]), default = "INFO")
@click.pass_context
def bitwidth(ctx, conf, ncpus, espresso, mode, alpha, beta, gamma, output, verbose):
    """
    Performs precision-scaling approximation
    """
    set_global_options(ctx, conf, "pyALS-RF", verbose, ncpus, espresso, "ps")
    logger = logging.getLogger("pyALS-RF")
    logger.info("Performing precision scaling approximation flow"
                f"\n\tconf: {conf}"
                f"\n\tuse espresso: {espresso}"
                f"\n\tevaluation mode: {mode}"
                f"\n\talpha: {alpha}"
                f"\n\tbeta: {beta}"
                f"\n\tgamma: {gamma}"
                )
    ps_flow(ctx, conf, mode, alpha, beta, gamma, output)
    store_flow(ctx)
    
@cli.command("als")
@click.option('-c', '--conf', type=click.Path(exists=True, dir_okay=False), default = None, help = "JSON configuration file")
@click.option('-j', '--ncpus', type = int, help = f"Number of parallel jobs to be used turing DSE. By default, it is {cpu_count()}", default = cpu_count())
@click.option('-e', '--espresso', is_flag = True, help = "Enable the Espresso heuristic logic minimizer for implementing Boolean Networks")
@click.option('--onestep', is_flag = True, default = False, help = "Enable one-step approximation flow")
@click.option('-o', '--output', type=click.Path(dir_okay=True), default = None, help = "Override output directory configuration")
@click.option('-v', '--verbose', type = click.Choice(["DEBUG", "INFO", "WARNINGS", "ERROR", "CRITICAL", 10, 20, 30, 40, 50]), default = "INFO")
@click.pass_context
def als(ctx, conf, ncpus, espresso, onestep, output, verbose):
    """
    Performs the standard ALS approximation flow
    """
    flow = "als-onestep" if onestep else "als-twosteps"
    set_global_options(ctx, conf, "pyALS-RF", verbose, ncpus, espresso, flow)
    if onestep:
        als_one_step(ctx)
    else:
        als_two_steps(ctx)
    store_flow(ctx)
                
@cli.command("full")
@click.option('-c', '--conf', type=click.Path(exists=True, dir_okay=False), default = None, help = "JSON configuration file")
@click.option('-j', '--ncpus', type = int, help = f"Number of parallel jobs to be used turing DSE. By default, it is {cpu_count()}", default = cpu_count())
@click.option('-e', '--espresso', is_flag = True, help = "Enable the Espresso heuristic logic minimizer for implementing Boolean Networks")
@click.option('--onestep', is_flag = True, default = False, help = "Enable one-step approximation flow")
@click.option('-v', '--verbose', type = click.Choice(["DEBUG", "INFO", "WARNINGS", "ERROR", "CRITICAL", 10, 20, 30, 40, 50]), default = "INFO")
@click.pass_context
def full(ctx, conf, ncpus, espresso, onestep, verbose):
    """
    Performs full approximation, i.e, both precision scaling on features and approximate logic synthesis on boolean functions
    """
    flow = "full-onestep" if onestep else "full-twosteps"
    set_global_options(ctx, conf, "pyALS-RF", verbose, ncpus, espresso, flow)
    if onestep:
        full_one_step(ctx)
    else:
        full_two_steps(ctx)
    store_flow(ctx)
        
@cli.command("grep")
@click.option('-c', '--conf', type=click.Path(exists=True, dir_okay=False), default = None, help = "JSON configuration file")
@click.option('-j', '--ncpus', type = int, help = f"Number of parallel jobs to be used turing DSE. By default, it is {cpu_count()}", default = cpu_count())
@click.option('-e', '--espresso', is_flag = True, help = "Enable the Espresso heuristic logic minimizer for implementing Boolean Networks")
@click.option('-f', '--fraction', type = float, default = 0.5, help = "Fraction of the test set to be used as pruning set")
@click.option('-a', '--approach', required = True, type = click.Choice(["loss", "redundancy"]), help = "Pruning approach (loss-based or redundancy-based).")
@click.option('-x', '--cost', type = click.Choice(["depth", "activity", "combined"]) , default = "combined", help = "Fraction of the test set to be used as pruning set")
@click.option('-r', '--minredundancy', type = int, default = 0, help = "Minimum redundancy to be kept")
@click.option('-m', '--maxloss', type = float, default = 5.0, help = "Maximum allowed accuracy loss")
@click.option('-o', '--output', type=click.Path(dir_okay=True), default = None, help = "Override output directory configuration")
@click.option('-v', '--verbose', type = click.Choice(["DEBUG", "INFO", "WARNINGS", "ERROR", "CRITICAL", 10, 20, 30, 40, 50]), default = "INFO")
@click.pass_context
def grep(ctx, conf, ncpus, espresso, fraction, approach, cost, minredundancy, maxloss, output, verbose):
    """
    Performs the Global Redundancy Reduction for Enseble Pruning approximation approach.
    """
    set_global_options(ctx, conf, "pyALS-RF", verbose, ncpus, espresso, "pruning")
    logger = logging.getLogger("pyALS-RF")
    logger.info("Performing hedge trimming"
                f"\n\tconf: {conf}"
                f"\n\tuse espresso: {espresso}"
                f"\n\tpruning fraction: {fraction}"
                f"\n\tpruning approach: {approach}"
                f"\n\tcost criterion: {cost}"
                f"\n\tmin. redundancy: {minredundancy}"
                f"\n\tmax. loss: {maxloss}"
                f"\n\toutput dir: {output}"
                )
    grep_flow(ctx, fraction, approach, cost, minredundancy, maxloss, output)
    store_flow(ctx)
    
@cli.command("reduplot")
@click.option('-c', '--conf', type=click.Path(exists=True, dir_okay=False), default = None, help = "JSON configuration file")
@click.option('-j', '--ncpus', type = int, help = f"Number of parallel jobs to be used turing DSE. By default, it is {cpu_count()}", default = cpu_count())
@click.option('-o', '--output', type=click.Path(dir_okay=True), default = None, help = "Override output directory configuration")
@click.option('-v', '--verbose', type = click.Choice(["DEBUG", "INFO", "WARNINGS", "ERROR", "CRITICAL", 10, 20, 30, 40, 50]), default = "INFO")
@click.pass_context
def reduplot(ctx, conf, ncpus, output, verbose):
    """
    Plots the redundancy of a classfier
    """
    set_global_options(ctx, conf, "pyALS-RF", verbose, ncpus, False)
    logger = logging.getLogger("pyALS-RF")
    logger.info("Plotting redundancy and error of the classifier"
                f"\n\tconf: {conf}"
                f"\n\toutput dir: {output}"
                )
    redundancy_plot(ctx, output)
    
@cli.command("genhdl")
@click.option('-c', '--conf', type=click.Path(exists=True, dir_okay=False), default = None, help = "JSON configuration file")
@click.option('-j', '--ncpus', type = int, help = f"Number of parallel jobs to be used turing DSE. By default, it is {cpu_count()}", default = cpu_count())
@click.option('-e', '--espresso', is_flag = True, help = "Enable the Espresso heuristic logic minimizer for implementing Boolean Networks")
@click.option('-l', '--luts', type = int, default = None, help = "Number of inputs for look-up tables. If specified, it enables the embedded LUT-mapper exploiting AMD/Xilinx LUT primitives.")
@click.option('-s', '--skip_exact', is_flag = True, help = "Skip generating the exact (non approximate) implementation")
@click.option('-o', '--output', type=click.Path(dir_okay=True), default = None, help = "Override output directory configuration")
@click.option('-v', '--verbose', type = click.Choice(["DEBUG", "INFO", "WARNINGS", "ERROR", "CRITICAL", 10, 20, 30, 40, 50]), default = "INFO")
@click.pass_context
def generate_hdl(ctx, conf, ncpus, espresso, luts, skip_exact, output, verbose):
    """
    Generates HDL implementations for a given classifier, including its approximate variants, if any.
    """
    set_global_options(ctx, conf, "pyALS-RF", verbose, ncpus, espresso)
    logger = logging.getLogger("pyALS-RF")
    logger.info("Performing HDL generation"
                f"\n\tconf: {conf}"
                f"\n\tuse espresso: {espresso}"
                f"\n\tLUT tech: {luts}"
                f"\n\tskip non-approximate: {skip_exact}"
                f"\n\output dir: {output}"
                )
    hdl_generation(ctx, luts, skip_exact, output)
    
@cli.command("debug")
@click.option('-c', '--conf', type=click.Path(exists=True, dir_okay=False), default = None, help = "JSON configuration file")
@click.option('-j', '--ncpus', type = int, help = f"Number of parallel jobs to be used turing DSE. By default, it is {cpu_count()}", default = cpu_count())
@click.option('-o', '--output', type=click.Path(dir_okay=True), default = None, help = "Override output directory configuration")
@click.option('-v', '--verbose', type = click.Choice(["DEBUG", "INFO", "WARNINGS", "ERROR", "CRITICAL", 10, 20, 30, 40, 50]), default = "INFO")
@click.pass_context
def debug_model(ctx, conf, ncpus, output, verbose):
    """
    Tests the pyALS-RF model against the scikit one.
    """
    set_global_options(ctx, conf, "pyALS-RF", verbose, ncpus, False)
    debug_with_scikit(ctx, output)

@cli.command("hdl-debug")
@click.option('-c', '--conf', type=click.Path(exists=True, dir_okay=False), default = None, help = "JSON configuration file")
@click.option('-j', '--ncpus', type = int, help = f"Number of parallel jobs to be used turing DSE. By default, it is {cpu_count()}", default = cpu_count())
@click.option('-i', '--index', type = int, help = "Index of the test data to dump")
@click.option('-a', '--axflow', type = click.Choice(["none", "pruning", "ps", "als", "full"]), help = "Approximation flow")
@click.option('-r', '--results', type = click.Path(dir_okay=True), default = None, help = "Overriden output directory")
@click.option('-v', '--variant', type = int, default = None, help = "Variant")
@click.option('-o', '--output', type = click.Path(dir_okay=False), default = None, help = "Output file")
@click.option('-v', '--verbose', type = click.Choice(["DEBUG", "INFO", "WARNINGS", "ERROR", "CRITICAL", 10, 20, 30, 40, 50]), default = "INFO")
@click.pass_context
def debug_hdl(ctx, conf, ncpus, index, axflow, results, variant, output, verbose):
    """
    Dumps the output signals for HDL debugging purpose
    """
    set_global_options(ctx, conf, "pyALS-RF", verbose, ncpus, False)
    hdl_debug_flow(ctx, index, axflow, results, variant, output)
    
@cli.command("dump")
@click.option('-d', '--dumpfile', type = click.Path(dir_okay=False), default = None, help = "dump file")
@click.option('-p', '--pmml', type = click.Path(dir_okay=False), default = None, help = "PMML file")
@click.option('-v', '--verbose', type = click.Choice(["DEBUG", "INFO", "WARNINGS", "ERROR", "CRITICAL", 10, 20, 30, 40, 50]), default = "INFO")
@click.pass_context
def debug_hdl(ctx, dumpfile, pmml, verbose):
    """
    Dumps the model
    """
    print_model(dumpfile, pmml)

@cli.command("eval")
@click.option('-c', '--conf', type=click.Path(exists=True, dir_okay=False), default = None, help = "JSON configuration file")
@click.option('-a', '--approach', type=click.Choice(["ps", "als", "full"]))
@click.option('-m', '--mode', type = click.Choice(["whole", "split"]))
@click.option('-n', '--nabs', type = str, required = True)
@click.pass_context
def eval(ctx, conf, approach, mode, nabs):
    if approach == "ps":
        ps_eval(conf, nabs)
    else:
        print("Not supported yet")
        exit()
        
@cli.command("distance")
@click.argument('configfile', type=click.Path(exists=True, dir_okay=False))
@click.argument('axapproach', type=click.Choice(["ps", "als", "full"]))
@click.option('--pareto', type = click.Path(exists=True, dir_okay=False), default = None)
@click.option('--axmode', type = click.Choice(["whole", "split"]))
@click.pass_context
def distance(configfile, axapproach, pareto, axmode):
    if axapproach == "ps":
        ps_distance(configfile, pareto)
    else:
        print("Not supported yet")
        exit()

@cli.command("compare")
@click.argument('configfile', type=click.Path(exists=True, dir_okay=False))
@click.argument('axapproach', type=click.Choice(["ps", "als", "full"]))
@click.argument('outdir', type=click.Path(exists=True, dir_okay=True))
@click.option('--pareto', type = click.Path(exists=True, dir_okay=False), default = None)
@click.option('--axmode', type = click.Choice(["whole", "split"]))
@click.option('--alpha', type=float, default = 0.07)
@click.option('--beta', type=float, default = 0.5)
@click.option('--gamma', type=float, default = 2)
@click.option('--maxloss', type=float, default = 5)
@click.option('--neval', type = int, default = None)
@click.pass_context
def compare(configfile, axapproach, outdir, pareto, axmode, alpha, beta, gamma, maxloss, neval):
    if axapproach == "ps":
        ps_compare(configfile, outdir, pareto, alpha, beta, gamma, maxloss, neval)
    else:
        print("Not supported yet")
        exit()

@cli.command("distgini")
@click.argument('configfile', type=click.Path(exists=True, dir_okay=False))
@click.argument('outdir', type=click.Path(exists=True, dir_okay=True))
@click.pass_context
def compgini(configfile, outdir):
    compute_gini_dist(configfile, outdir)
    
cli.add_command(bitwidth)
cli.add_command(als)
cli.add_command(full)
cli.add_command(grep)
cli.add_command(generate_hdl)
cli.add_command(debug_model)
cli.add_command(debug_hdl)
cli.add_command(eval)
cli.add_command(distance)
cli.add_command(compare)
cli.add_command(compgini)

if __name__ == '__main__':
    if git_updater(os.path.dirname(os.path.realpath(__file__))):
        os.execv(sys.argv[0], sys.argv)
    else:
        cli()

