#!/usr/bin/python3 
"""
Copyright 2021-2023 Salvatore Barone <salvatore.barone@unina.it>

This is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free
Software Foundation; either version 3 of the License, or any later version.

This is distributed in the hope that it will be useful, but WITHOUT
ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
more details.

You should have received a copy of the GNU General Public License along with
RMEncoder; if not, write to the Free Software Foundation, Inc., 51 Franklin
Street, Fifth Floor, Boston, MA 02110-1301, USA.
"""
import click, os, sys
from multiprocessing import cpu_count
from src.ax_flows import set_global_options, store_flow
from src.ps_flow import ps_flow, ps_eval, ps_distance, ps_compare, compute_gini_dist
from src.als_flow import als_one_step, als_two_steps
from src.als_wc_flow import als_wc_one_step, als_wc_two_steps
from src.combined_flow import full_one_step, full_two_steps
from src.ConfigParsers.DtGenConfigParser import *
from src.pruning_flow import pruning_flow
from src.hdl_generation import hdl_generation
from src.debug_flow import hdl_debug_flow, debug_with_scikit, print_model
from src.git_updater import git_updater


@click.group(chain=True)
@click.pass_context
def cli(ctx):
    ctx.ensure_object(dict)
    
@cli.command("ps")
@click.option('-c', '--conf', type=click.Path(exists=True, dir_okay=False), default = None, help = "JSON configuration file")
@click.option('-j', '--ncpus', type = int, help = f"Number of parallel jobs to be used turing DSE. By default, it is {cpu_count()}", default = cpu_count())
@click.option('-e', '--espresso', is_flag = True, help = f"Enable the Espresso heuristic logic minimizer for implementing Boolean Networks")
@click.option('--mode', type=click.Choice(["rank", "full"]), default = "full")
@click.option('--alpha', type=float, default = 0.07)
@click.option('--beta', type=float, default = 0.5)
@click.option('--gamma', type=float, default = 2)
@click.pass_context
def bitwidth(ctx, conf, ncpus, espresso, mode, alpha, beta, gamma):
    """
    Performs precision-scaling approximation
    """
    set_global_options(ctx, conf, ncpus, espresso, "ps")
    ps_flow(ctx, mode, alpha, beta, gamma)
    store_flow(ctx)
    
@cli.command("als")
@click.option('-c', '--conf', type=click.Path(exists=True, dir_okay=False), default = None, help = "JSON configuration file")
@click.option('-j', '--ncpus', type = int, help = f"Number of parallel jobs to be used turing DSE. By default, it is {cpu_count()}", default = cpu_count())
@click.option('-e', '--espresso', is_flag = True, help = f"Enable the Espresso heuristic logic minimizer for implementing Boolean Networks")
@click.option('--onestep', is_flag = True, default = False, help = "Enable one-step approximation flow")
@click.pass_context
def als(ctx, conf, ncpus, espresso, onestep):
    """
    Performs the standard ALS approximation flow
    """
    flow = "als-onestep" if onestep else "als-twosteps"
    set_global_options(ctx, conf, ncpus, espresso, flow)
    if onestep:
        als_one_step(ctx)
    else:
        als_two_steps(ctx)
    store_flow(ctx)
        
@cli.command("als-wc")
@click.option('-c', '--conf', type=click.Path(exists=True, dir_okay=False), default = None, help = "JSON configuration file")
@click.option('-j', '--ncpus', type = int, help = f"Number of parallel jobs to be used turing DSE. By default, it is {cpu_count()}", default = cpu_count())
@click.option('-e', '--espresso', is_flag = True, help = f"Enable the Espresso heuristic logic minimizer for implementing Boolean Networks")
@click.option('--onestep', is_flag = True, default = False, help = "Enable one-step approximation flow")
@click.pass_context
def als_wc(ctx, conf, ncpus, espresso, onestep):
    """
    Performs ALS-WC approximation
    """
    flow = "wcals-onestep" if onestep else "wcals-twosteps"
    set_global_options(ctx, conf, ncpus, espresso, flow)
    if onestep:
        als_wc_one_step(ctx)
    else:
        als_wc_two_steps(ctx)
    store_flow(ctx)
        
@cli.command("full")
@click.option('-c', '--conf', type=click.Path(exists=True, dir_okay=False), default = None, help = "JSON configuration file")
@click.option('-j', '--ncpus', type = int, help = f"Number of parallel jobs to be used turing DSE. By default, it is {cpu_count()}", default = cpu_count())
@click.option('-e', '--espresso', is_flag = True, help = f"Enable the Espresso heuristic logic minimizer for implementing Boolean Networks")
@click.option('--onestep', is_flag = True, default = False, help = "Enable one-step approximation flow")
@click.pass_context
def full(ctx, conf, ncpus, espresso, onestep):
    """
    Performs full approximation, i.e, both precision scaling on features and approximate logic synthesis on boolean functions
    """
    flow = "full-onestep" if onestep else "full-twosteps"
    set_global_options(ctx, conf, ncpus, espresso, flow)
    if onestep:
        full_one_step(ctx)
    else:
        full_two_steps(ctx)
    store_flow(ctx)
        
@cli.command("pruning")
@click.option('-c', '--conf', type=click.Path(exists=True, dir_okay=False), default = None, help = "JSON configuration file")
@click.option('-j', '--ncpus', type = int, help = f"Number of parallel jobs to be used turing DSE. By default, it is {cpu_count()}", default = cpu_count())
@click.option('-e', '--espresso', is_flag = True, help = f"Enable the Espresso heuristic logic minimizer for implementing Boolean Networks")
@click.option('-t', '--train', is_flag = True, help = f"Use training data")
@click.option('-o', '--output', type=click.Path(dir_okay=True), default = None, help = f"Override output directory configuration")
@click.pass_context
def assertions_pruning(ctx, conf, ncpus, espresso, train, output):
    set_global_options(ctx, conf, ncpus, espresso, "pruning")
    pruning_flow(ctx, train, output)
    store_flow(ctx)
    
@cli.command("genhdl")
@click.option('-c', '--conf', type=click.Path(exists=True, dir_okay=False), default = None, help = "JSON configuration file")
@click.option('-j', '--ncpus', type = int, help = f"Number of parallel jobs to be used turing DSE. By default, it is {cpu_count()}", default = cpu_count())
@click.option('-o', '--output', type=click.Path(dir_okay=True), default = None, help = f"Override output directory configuration")
@click.option('-e', '--espresso', is_flag = True, help = f"Enable the Espresso heuristic logic minimizer for implementing Boolean Networks")
@click.pass_context
def generate_hdl(ctx, conf, ncpus, output, espresso):
    """
    Generates HDL implementation
    """
    set_global_options(ctx, conf, ncpus, espresso)
    hdl_generation(ctx, output)
    
@cli.command("debug")
@click.option('-c', '--conf', type=click.Path(exists=True, dir_okay=False), default = None, help = "JSON configuration file")
@click.option('-j', '--ncpus', type = int, help = f"Number of parallel jobs to be used turing DSE. By default, it is {cpu_count()}", default = cpu_count())
@click.option('-o', '--output', type=click.Path(dir_okay=True), default = None, help = f"Override output directory configuration")
@click.pass_context
def debug_model(ctx, conf, ncpus, output):
    """
    Tests the pyALS-RF model against the scikit one.
    """
    set_global_options(ctx, conf, ncpus)
    debug_with_scikit(ctx, output)
      
@cli.command("hdl-debug")
@click.option('-c', '--conf', type=click.Path(exists=True, dir_okay=False), default = None, help = "JSON configuration file")
@click.option('-j', '--ncpus', type = int, help = f"Number of parallel jobs to be used turing DSE. By default, it is {cpu_count()}", default = cpu_count())
@click.option('-i', '--index', type = int, help = f"Index of the test data to dump")
@click.option('-a', '--axflow', type = click.Choice(["none", "pruning", "ps", "als", "full"]), help = f"Approximation flow")
@click.option('-r', '--results', type = click.Path(dir_okay=True), default = None, help = f"Overriden output directory")
@click.option('-v', '--variant', type = int, default = None, help = f"Variant")
@click.option('-o', '--output', type = click.Path(dir_okay=False), default = None, help = f"Output file")
@click.pass_context
def debug_hdl(ctx, conf, ncpus, index, axflow, results, variant, output):
    """
    Dumps the output signals for HDL debugging purpose
    """
    set_global_options(ctx, conf, ncpus)
    hdl_debug_flow(ctx, index, axflow, results, variant, output)
    
@cli.command("dump")
@click.option('-d', '--dumpfile', type = click.Path(dir_okay=False), default = None, help = f"dump file")
@click.option('-p', '--pmml', type = click.Path(dir_okay=False), default = None, help = f"PMML file")
@click.pass_context
def debug_hdl(ctx, dumpfile, pmml):
    """
    Dumps the model
    """
    print_model(dumpfile, pmml)
     
cli.add_command(bitwidth)
cli.add_command(als)
cli.add_command(als_wc)
cli.add_command(full)
cli.add_command(assertions_pruning)
cli.add_command(generate_hdl)
cli.add_command(debug_model)
cli.add_command(debug_hdl)
    
@click.group()
def other_commands():
    pass

@click.command("eval")
@click.argument('configfile', type=click.Path(exists=True, dir_okay=False))
@click.argument('axapproach', type=click.Choice(["ps", "als", "full"]))
@click.option('--axmode', type = click.Choice(["whole", "split"]))
@click.option('--nabs', type = str, required = True)
def eval(configfile, axapproach, axmode, nabs):
    if axapproach == "ps":
        ps_eval(configfile, nabs)
    else:
        print("Not supported yet")
        exit()
        
@other_commands.command("distance")
@click.argument('configfile', type=click.Path(exists=True, dir_okay=False))
@click.argument('axapproach', type=click.Choice(["ps", "als", "full"]))
@click.option('--pareto', type = click.Path(exists=True, dir_okay=False), default = None)
@click.option('--axmode', type = click.Choice(["whole", "split"]))
def distance(configfile, axapproach, pareto, axmode):
    if axapproach == "ps":
        ps_distance(configfile, pareto)
    else:
        print("Not supported yet")
        exit()

@other_commands.command("compare")
@click.argument('configfile', type=click.Path(exists=True, dir_okay=False))
@click.argument('axapproach', type=click.Choice(["ps", "als", "full"]))
@click.argument('outdir', type=click.Path(exists=True, dir_okay=True))
@click.option('--pareto', type = click.Path(exists=True, dir_okay=False), default = None)
@click.option('--axmode', type = click.Choice(["whole", "split"]))
@click.option('--alpha', type=float, default = 0.07)
@click.option('--beta', type=float, default = 0.5)
@click.option('--gamma', type=float, default = 2)
@click.option('--maxloss', type=float, default = 5)
@click.option('--neval', type = int, default = None)
def compare(configfile, axapproach, outdir, pareto, axmode, alpha, beta, gamma, maxloss, neval):
    if axapproach == "ps":
        ps_compare(configfile, outdir, pareto, alpha, beta, gamma, maxloss, neval)
    else:
        print("Not supported yet")
        exit()

@other_commands.command("distgini")
@click.argument('configfile', type=click.Path(exists=True, dir_okay=False))
@click.argument('outdir', type=click.Path(exists=True, dir_okay=True))
def compgini(configfile, outdir):
    compute_gini_dist(configfile, outdir)
    

other_commands.add_command(eval)
other_commands.add_command(distance)
other_commands.add_command(compare)
other_commands.add_command(compgini)


if __name__ == '__main__':
    if git_updater(os.path.dirname(os.path.realpath(__file__))):
        os.execv(sys.argv[0], sys.argv)
    else:
        #cli(obj={})
        cli()

