#!/usr/bin/python3 
"""
Copyright 2021-2022 Salvatore Barone <salvatore.barone@unina.it>

This is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free
Software Foundation; either version 3 of the License, or any later version.

This is distributed in the hope that it will be useful, but WITHOUT
ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
more details.

You should have received a copy of the GNU General Public License along with
RMEncoder; if not, write to the Free Software Foundation, Inc., 51 Franklin
Street, Fifth Floor, Boston, MA 02110-1301, USA.
"""
import click, git, os
from src.Classifier import Classifier
from src.ps_flow import ps_flow
from src.als_flow import als_one_step, als_two_steps
from src.combined_flow import full_one_step, full_two_steps


def git_updater():
    try:
        dir_path = os.path.dirname(os.path.realpath(__file__))
        repo = git.Repo(dir_path)
        repo.remotes.origin.fetch()
        local_head = repo.heads[0].commit
        remote_head = repo.remotes.origin.refs[0].commit
        if remote_head != local_head:
            print("Updating the tool...")
            repo.remotes.origin.pull()
            for submodule in repo.submodules:
                submodule.update(init = True, recursive = True)
            return True
        return False
    except git.exc.GitCommandError as e:
        print(e)
        print("\n*** Ensure you have access to the internet! ***\n")
        return False

@click.group()
def cli():
    pass


@click.command("dump")
@click.argument('pmmlfile', type=click.Path(exists=True, dir_okay=False))
def dump(pmmlfile):
    """
    Dump the classifier and exit
    
    PMMLFILE is the PMML file describing the model
    """
    classifier = Classifier(None)
    classifier.parse(pmmlfile)
    classifier.dump()


@click.command("ps")
@click.argument('configfile', type=click.Path(exists=True, dir_okay=False))
def bitwidth(configfile):
    """
    Performs precision-scaling approximation
    
    CONFIGFILE is the path of the JSON configuration file containing all parameters which are needed to the tool.
    """
    ps_flow(configfile)
    


@click.command("als")
@click.argument('configfile', type=click.Path(exists=True, dir_okay=False))
@click.option("-1", "--onestep", is_flag = True, help = "Enables the one-step approximation flow")
def als(configfile, onestep):
    """
    Performs ALS approximation
    
    CONFIGFILE is the path of the JSON configuration file containing all parameters which are needed to the tool.
    """
    if onestep:
        als_one_step(configfile)
    else:
        als_two_steps(configfile)


@click.command("full")
@click.argument('configfile', type=click.Path(exists=True, dir_okay=False))
@click.option("-1", "--onestep", is_flag = True, help = "Enables the one-step approximation flow")
def full(configfile, onestep):
    """
    Performs full approximation (both ps and als)
    
    CONFIGFILE is the path of the JSON configuration file containing all parameters which are needed to the tool.
    """
    if onestep:
        full_one_step(configfile)
    else:
        full_two_steps(configfile)

cli.add_command(dump)
cli.add_command(bitwidth)
cli.add_command(als)
cli.add_command(full)

if __name__ == '__main__':
	#if git_updater():
	#	os.execv(sys.argv[0], sys.argv)
	#else:
		cli()

