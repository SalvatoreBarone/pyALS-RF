[approximation]
; approximation technique to be used:
;  - als: approximate logic synthesis on assertion functions
;  - ps: precision-scaling on comparators
;  - full: both of the above-mentioned techniques
technique = als

; Approximation strategy (taken into account only for als and full techniques):
;  - one: one-step approximation strategy. All the trees are approximated simultaneously (as far as the assertion
;    functions are concerned). The set of decision variables of the optimization problem consists of the union of the
;    sets of decision variables that allow each of the individual trees to be optimized.
;    It is easy for the solution space to explode quickly, but (theoretically) this strategy should allow converging
;    towards the optimum between classification-accuracy loss and hardware resource savings.
;  - two: two-step approximation strategy. The two optimization steps involve first individual trees, each independently
;    approximated, then the whole classifier. The result of the individual tree optimization step is the input to the
;    second optimization step. When the trees are approximated, the decision variables represent the Hamming distance
;    between the exact specification and the approximated specification of the LUTs. When the entire classifier is
;    approximated, there is a decision variable for each tree, representing which approximate configuration resulting
;    from the first approximation step should be used to realize the assertion function of that particular tree.
;    This strategy allows to drastically reduce the size of the solution space, but, on the other hand, it may result
;    in sub-optimum points between classification-accuracy loss and hardware resource savings
strategy = one

[als]
; LUT technology to be used during mapping (4-LUT, 6-LUT, ...)
luttech = 6

; path to the catalog file
catalog = lut_catalog.db

; timeout for the SMT-based exact synthesis, in ms.
timeout = 120000

[als-optimization]
; population size (for the ALS optimization step, ignored if the approximation strateegy is one-step).
population_size = 500
; termination criteria, in terms of iterations (for the ALS optimization step, ignored if the approximation strateegy is one-step).
iterations = 121
; crossover probability  (for the ALS optimization step, ignored if the approximation strateegy is one-step). Suggested value = [0.8, 0.9]
crossover_probability = 0.9
; crossover distribution index (for the ALS optimization step, ignored if the approximation strateegy is one-step). Low values allow mating more distant parents (in terms of Euclidean distance in solution space)
crossover_eta = 1
; mutation probability (for the ALS optimization step, ignored if the approximation strateegy is one-step). Suggested value = 1 / number of decision variables
mutation_probability = 0.01
; mutation distribution index (for the ALS optimization step, ignored if the approximation strateegy is one-step).
mutation_eta = 20
; maximum-error constraint, in terms of percentage of error-frequency (for the ALS optimization step, ignored if the approximation strateegy is one-step).
max_error_frequency = 10

[final-optimization]
; population size (for the final optimization).
population_size = 500
; termination criteria, in terms of iterations (for the final optimization).
iterations = 121
; crossover probability  (for the final optimization). Suggested value = [0.8, 0.9]
crossover_probability = 0.9
; crossover distribution index (for the final optimization). Low values allow mating more distant parents (in terms of Euclidean distance in solution space)
crossover_eta = 1
; mutation probability (for the final optimization). Suggested value = 1 / number of decision variables
mutation_probability = 0.01
; mutation distribution index (for the final optimization).
mutation_eta = 1
; maximum-error constraint, in terms of percentage of classification accuracy loss (for the final optimization).
max_accuracy_loss = 5
